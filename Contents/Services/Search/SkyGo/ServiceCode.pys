import re

BASE_URL = 'http://go.sky.com'
SEARCH_URL = 'http://go.sky.com/vod/content/Home/Application_Navigation/Search_All/content/default/search.do?searchTerm=%s&searchTypeFilter=titleNameSearch'

####################################################################################################

def Search(query):

  # Compute the URL and download the HTML
  url = SEARCH_URL % String.Quote(query)
  search_page = HTML.ElementFromURL(url)
  search_results = search_page.xpath("//li[contains(@class, 'videoHeadline')]")
  
  search_page = HTML.ElementFromURL(url)
  search_results = search_page.xpath("//div[@class='resultsBlock']//div[contains(@class,'promoItem')]")
   
  # Create a container to hold the results
  c = ObjectContainer()
  for item in search_results:  
    try:

      # Extract all available information about the found item
      details = ParseItem(item)

      # We should only display content which actually comes from the skygo website. It's 
      # possible that some titles might actually be linked to the BBC
      url = details['url']
      if url.startswith("http://go.sky.com/vod") == False:
        continue
  
      # It appears that the best way to determine if the found item is a movie is using the
      # path to the content. If this comes from SKYMOVIES, then it's more than likely to 
      # actually be a Movie.
      title = details['title']
      if url.startswith('http://go.sky.com/vod/content/SKYMOVIES'):
        c.add(MovieObject(
          url = url,
          title = title,
          duration = details['duration'],
          summary = details['description'],
          thumb = details['thumb'],
          directors = details['directors'],
          content_rating = details['content_rating']
        ))
        continue

      # The title of EpisodeObjects are known to contain a reference to the actual episode
      # number. Some examples are as follows:
      #  - Entourage Season 9 | Ep 2 Out with a Bang
      #  - Howard Goodall's Big Bangs | Ep 2 Opera

      # We can therefore assume if the title does not contain "Ep *", then it's likely to
      # be a VideoClip, or non-episoded show.
      if re.match(".* \| Ep [0-9]+ .*", title) == None:
        c.add(VideoClipObject(
          url = url,
          title = title,
          summary = details['description'],
          thumb = details['thumb']
        ))
        continue

      # If we've got this far then we are sure the found title is actually a TV Episode. We
      # therefore need to attempt to extract the season/episode information out of it.
      show = None
      season = 0
      episode = 0
      episode_title = None
      full_tv_details = re.match("^(?P<show>.*) Season (?P<season>[0-9]+) \| Ep (?P<episode>[0-9]+) (?P<episode_title>.*)", title)
      if full_tv_details:
        details_dict = full_tv_details.groupdict()
        show = details_dict['show']
        season = int(details_dict['season'])
        episode = int(details_dict['episode'])
        episode_title = details_dict['episode_title']

      else:
        short_tv_details = re.match("^(?P<show>.*) \| Ep (?P<episode>[0-9]+) (?P<episode_title>.*)", title)
        if short_tv_details:
          details_dict = short_tv_details.groupdict()
          show = details_dict['show']
          episode = int(details_dict['episode'])
          episode_title = details_dict['episode_title']

      c.add(EpisodeObject(
        url = url,
        title = episode_title,
        summary = details['description'],
        thumb = details['thumb'],
        show = show,
        season = season,
        index = episode
      ))

    except:
      Log.Exception("Exception adding video result")
      
  return c

####################################################################################################

def ParseItem(item):

  details = {}

  # The title
  details['title'] = item.xpath(".//div[@class='synopsisText']/h2/a/text()")[0]

  # The (relative) url
  details['url'] = item.xpath(".//a")[0].get('href')
  if details['url'].startswith("http") == False:
    details['url'] = BASE_URL + details['url']

  # The (relative) thumbnail url
  details['thumb'] = item.xpath("./a//img")[0].get('src')
  if details['thumb'].startswith("http") == False:
    details['thumb'] = BASE_URL + details['thumb']

  # The description
  details['description'] = item.xpath(".//div[@class='synopsisText']/p/text()")[0]

  # [Optional] The Director
  details['directors'] = []
  try: 
    details['directors'] = item.xpath(".//div[@class='synopsisText']/p/b[contains(text(), 'Director')]/../text()")[0].split(', ')
    details['directors'] = [ dir.strip() for dir in details['directors'] ]
  except: pass

  # [Optional] The Actors
  details['starring'] = None
  try: 
    details['starring'] = item.xpath(".//div[@class='synopsisText']/p/b[contains(text(), 'Starring')]/../text()")[0].split(', ')
    details['starring'] = [ star.strip() for star in details['starring'] ]
  except: pass

  # [Optional] Duration (in ms)
  details['duration'] = 0
  try:
    details['duration'] = item.xpath(".//div[@class='synopsisText']/ul/li/strong[contains(text(), 'duration')]/../span/text()")[0]
    details['duration'] = int(details['duration'].split(' ')[0]) * 60 * 1000
  except: pass

  # [Optional] The content rating
  details['content_rating'] = None
  try: details['content_rating'] = item.xpath(".//div[@class='synopsisText']/ul/li/strong[contains(text(), 'rating')]/../span/text()")[0]
  except: pass

  return details